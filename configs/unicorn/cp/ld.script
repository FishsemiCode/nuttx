/****************************************************************************
 * configs/unicorn/cp/ld.script
 *
 *   Copyright (C) 2017 Pinecone Inc. All rights reserved.
 *   Author: Xiang Xiao <xiaoxiang@pinecone.net>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name NuttX nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

MEMORY
{
	flash (rx)  : ORIGIN = 0x00000000, LENGTH = 1216K
	sram (rwx)  : ORIGIN = 0x01000000, LENGTH = 192K
	cpram0 (rw) : ORIGIN = 0x60000000, LENGTH = 336K
	cpram1 (rw) : ORIGIN = 0x60054000, LENGTH = 128K
}

OUTPUT_ARCH(arm)
ENTRY(_stext)
SECTIONS
{
	.text : {
		_stext = ABSOLUTE(.);
		*(.vectors)

		/* explictly specify the offset of link tags */
		. = 0x400;
		/* image magic */
		LONG(0x21494350)
		LONG(_stext)
		LONG(_eflash - _stext)

		*(.text .text.*)
		*(.fixup)
		*(.gnu.warning)
		*(.rodata .rodata.*)
		*(.gnu.linkonce.t.*)
		*(.glue_7)
		*(.glue_7t)
		*(.got)
		*(.gcc_except_table)
		*(.gnu.linkonce.r.*)
		_etext = ABSOLUTE(.);
	} > flash

	.init_section : {
		_sinit = ABSOLUTE(.);
		KEEP(*(.init_array .init_array.*))
		_einit = ABSOLUTE(.);
	} > flash

	.ARM.extab : {
		*(.ARM.extab*)
	} > flash

	__exidx_start = ABSOLUTE(.);
	.ARM.exidx : {
		*(.ARM.exidx*)
	} > flash
	__exidx_end = ABSOLUTE(.);

	.copy.table : {
		_scopytable = ABSOLUTE(.);
		LONG(LOADADDR(.cpram1.data))
		LONG(ADDR(.cpram1.data))
		LONG(ADDR(.cpram1.data) + SIZEOF(.cpram1.data))
		_ecopytable = ABSOLUTE(.);
	} > flash

	.zero.table : {
		_szerotable = ABSOLUTE(.);
		LONG(_cpram0_sbss)
		LONG(_cpram0_ebss)
		LONG(ADDR(.cpram1.bss))
		LONG(ADDR(.cpram1.bss) + SIZEOF(.cpram1.bss))
		_ezerotable = ABSOLUTE(.);
	} > flash

	_framfuncs = LOADADDR(.ramfunc);
	.ramfunc : {
		_sramfuncs = ABSOLUTE(.);
		*(.ramfunc .ramfunc.*)
		_eramfuncs = ABSOLUTE(.);
	} > sram AT > flash

	_eronly = LOADADDR(.data);
	.data : {
		_sdata = ABSOLUTE(.);
		*(.data .data.*)
		*(.gnu.linkonce.d.*)
		CONSTRUCTORS
		_edata = ABSOLUTE(.);
	} > sram AT > flash

	.bss : {
		_sbss = ABSOLUTE(.);
		*(.bss .bss.*)
		*(.gnu.linkonce.b.*)
		*(COMMON)
		. = ALIGN(8);
		_ebss = ABSOLUTE(.);
	} > sram

	_eheap = _slog;
	_slog = _elog - _logsize;
	_elog = ORIGIN(sram) + LENGTH(sram);
	_logsize = 4096;

	.cpram0.nozero(NOLOAD) : {
		*(.cpram0.nozero)
	} > cpram0

	/* cpram0 bss section is overlayed by NBIOT & GPS. */
	_cpram0_sbss = .;
	.cpram0.nbiot.bss _cpram0_sbss(NOLOAD) : {
		*(.cpram0.nbiot.bss)
	}
	.cpram0.gps.bss _cpram0_sbss(NOLOAD) : {
		*(.cpram0.gps.bss)
	}
	_cpram0_ebss = _cpram0_sbss + MAX(SIZEOF(.cpram0.nbiot.bss), SIZEOF(.cpram0.gps.bss));

	.cpram1.data : {
		_cpram1_srsvd = ABSOLUTE(.);
		/*
		 * struct reserved_data {
		 *  uint32_t magic;
		 *  uint32_t size;
		 *  uint32_t checksum;
		 *  uint8_t  data[0];
		 * }
		 */
		LONG(0x1234abcd)
		LONG(_cpram1_ersvd - _cpram1_srsvd - 12)
		LONG(0)
		*(.cpram1.rsvd)
		_cpram1_ersvd = ABSOLUTE(.);

		*(.cpram1.const)
		*(.cpram1.data)
	} > cpram1 AT > flash

	_eflash = LOADADDR(.cpram1.data) + SIZEOF(.cpram1.data);

	.cpram1.bss(NOLOAD) : {
		*(.cpram1.bss)
	} > cpram1

	/* Stabs debugging sections. */
	.stab 0 : { *(.stab) }
	.stabstr 0 : { *(.stabstr) }
	.stab.excl 0 : { *(.stab.excl) }
	.stab.exclstr 0 : { *(.stab.exclstr) }
	.stab.index 0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment 0 : { *(.comment) }
	.debug_abbrev 0 : { *(.debug_abbrev) }
	.debug_info 0 : { *(.debug_info) }
	.debug_line 0 : { *(.debug_line) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	.debug_aranges 0 : { *(.debug_aranges) }
}
